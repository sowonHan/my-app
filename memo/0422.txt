*** DOM을 직접적으로 건드려야 할 때 (state로 해결할 수 없는 문제들) ***
1. 특정 input에 포커스를 주기 위해
2. 스크롤 박스 조작을 위해
3. canvas 요소에 그림 그리기

*** dom을 직접 건드릴 수 있는 ref를 사용하는 방법 ***
1. 콜백 함수
2. createRef (리액트 v.16.3 이후부터 사용 가능)

ref는 컴포넌트에도 달 수 있다 (원래는 돔에 달았다) -> 내부에 있는 dom을 외부에서 사용할 때
근데 부모자식 컴포넌트간의 메소드 교류는 context를 이용하고
ref를 쓰면 나중에 코드가 꼬이기 때문에 굳이 컴포넌트에 달 이유는 없다

ref는 클래스형 컴포넌트에서 쓸 수 있고
함수형 컴포넌트에서는 useRef 라는 hook을 사용한다

hook 이란? 
클래스 코드 형태로 작성하지 않고 상태값과 여러 리액트 기능을 이용할 수 있게 해주는 함수
Hook은 함수 컴포넌트에서 React state와 생명주기 기능(lifecycle features)을 “연동(hook into)“할 수 있게 해주는 함수입니다. Hook은 class 안에서는 동작하지 않습니다. 대신 class 없이 React를 사용할 수 있게 해주는 것입니다. (하지만 이미 짜놓은 컴포넌트를 모조리 재작성하는 것은 권장하지 않습니다. 대신 새로 작성하는 컴포넌트부터는 Hook을 이용하시면 됩니다.)
https://ko.reactjs.org/docs/hooks-intro.html

*** 컴포넌트가 업데이트 될 때 (리렌더링) ***
1. props가 바뀔 때
2. state가 바뀔 때
3. 부모 컴포넌트가 리렌더링될 때
4. this.forceUpdate로 강제 렌더링할 때